.\" Automatically generated by Pod::Man version 1.15
.\" Tue Mar 12 21:46:23 2002
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "CTPort 3"
.TH CTPort 3 "perl v5.6.1" "2001-12-08" "User Contributed Perl Documentation"
.UC
.SH "NAME"
Telephony::CTPort \- Computer Telephony programming in Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use Telephony::CTPort;
.Ve
.Vb 6
\& $ctport = new Telephony::CTPort(1200); # first port of CT card
\& $ctport->off_hook;
\& $ctport->play("beep");                 
\& $ctport->record("prompt.wav",5,"");    # record for 5 seconds
\& $ctport->play("prompt.wav");           # play back
\& $ctport->on_hook;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements an Object-Oriented interface to control Computer 
Telephony (\s-1CT\s0) card ports using Perl.  It is part of a client/server
library for rapid \s-1CT\s0 application development using Perl.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Rowe, david@voicetronix.com.au
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
new Telephony::CTPort(\s-1SERVER_PORT\s0);
.PP
Connects Perl client to the \*(L"ctserver\*(R" server via \s-1TCP/IP\s0 port \s-1SERVER_PORT\s0,
where SERVER_PORT=1200, 1201,..... etc for the first, second,..... etc
\&\s-1CT\s0 ports.
.SH "METHODS"
.IX Header "METHODS"
\&\fIevent()\fR \- returns the most recent event, or undef if no events pending.
.PP
\&\fIoff_hook()\fR \- takes port off hook, just like picking up the phone.
.PP
\&\fIon_hook()\fR \- places the port on hook, just like hanging up.
.PP
\&\fIwait_for_ring()\fR \- blocks until port detects a ring, then returns.  The caller
\&\s-1ID\s0 (if present) will be returned.
.PP
\&\fIwait_for_dial_tone()\fR \- blocks until dial tone detected on port, then returns.
.PP
play($files) \- plays audio files, playing stops immediately if a \s-1DTMF\s0 key is 
pressed.  The \s-1DTMF\s0 key pressed can be read using the \fIevent()\fR member function.
If \f(CW$ctport\fR->\fIevent()\fR is already defined it returns immediately.  Any digits
pressed while playing will be added to the digit buffer.
.PP
Filename extensions:
.Ip "\(bu" 4
default is .au, can be redefined by calling \fIset_def_ext()\fR
.Ip "\(bu" 4
override default by providing extension, e.g. \f(CW$ctport\fR->play(\*(L"hello.wav\*(R");
.PP
Searches for file in:
.Ip "\(bu" 4
paths defined by \fIset_path()\fR method
.Ip "\(bu" 4
current dir
.Ip "\(bu" 4
\&\*(L"prompts\*(R" sub dir (relative to current dir)
.Ip "\(bu" 4
full path supplied by caller
.Ip "\(bu" 4
/var/ctserver/UsMEng
.PP
You can play multiple files, e.g. 
.PP
$ctport->play(\*(L"Hello World\*(R"); 
.PP
(assumes you have Hello.au and World.au files available)
.PP
You can \*(L"speak\*(R" a limited vocab, e.g. 
.PP
$ctport->play(\*(L"1 2 3\*(R"); 
.PP
(see /var/ctserver/UsMEng directory for the list of included files that define
the vocab)
.PP
record($file_name, \f(CW$time_out\fR, \f(CW$term_keys\fR) \- records \f(CW$file_name\fR for 
\&\f(CW$time_out\fR seconds or until any of the digits in \f(CW$term_keys\fR are pressed.
The path of \f(CW$file_name\fR is considered absolute if there is a leading /, 
otherwise it is relative to the current directory.
.PP
ctsleep($seconds) \- blocks for \f(CW$seconds\fR, unless a \s-1DTMF\s0 key is pressed in which
case it returns immediately.  If \f(CW$ctport\fR->\fIevent()\fR is already defined it 
returns immediately without sleeping.
.PP
\&\fIclear()\fR \- clears any pending events, and clears the \s-1DTMF\s0 digit buffer.
.PP
collect($max_digits, \f(CW$max_seconds\fR) \- returns up to \f(CW$max_digits\fR by waiting up 
to \f(CW$max_seconds\fR.  Will return as soon as either \f(CW$max_digits\fR have been collected
or \f(CW$max_seconds\fR have elapsed.  On return, the \fIevent()\fR method will return
undefined.  
.PP
\&\s-1DTMF\s0 digits pressed at any time are collected in the digit buffer.  The digit
buffer is cleared by the \fIclear()\fR method.  Thus it is possible for this function
to return immediately if there are already \f(CW$max_digits\fR in the digit buffer.
.PP
dial($number) \- Dials a \s-1DTMF\s0 string.  Valid characters are 1234567890#*,&
.Ip "\(bu" 4
, gives a 1 second pause, e.g. \f(CW$ctport\fR->dial(",,1234) will wait 2 seconds, 
then dial extension 1234.
.Ip "\(bu" 4
& generates a hook flash (used for transfers on many PBXs) e.g. :
.Sp
$ctport->dial("&,1234) will send a flash, wait one second, then dial 1234. 
.PP
\&\fInumber()\fR \- returns a string of audio files that enable numbers to be \*(L"spoken\*(R"
.PP
e.g. \fInumber()\fR will convert 121 into \*(L"one hundred twenty one\*(R" 
.PP
e.g. ctplay(\*(L"youhave \*(R" . \f(CW$ctnumbe\fRr($num_mails) . \*(L" mails\*(R");
.PP
(assumes files youhave.au, mails.au, and variable \f(CW$num_mails\fR exist)
.PP
\&\fIset_path()\fR \- used to set the search path for audio files supplied to \fIplay()\fR
.PP
\&\fIget_inter_digit_time_out()\fR \- returns the optional inter-digit time out used
with \fIcollect()\fR.
.PP
set_inter_digit_time_out($time_out) \- sets the optional inter-digit time out 
used with \fIcollect()\fR.
